<?php

////////// GENERAL //////////

function shanti_kmaps_fields_menu () {
  return array(
    'shanti_kmaps_fields/api/test' => array(
      'page callback' => 'shanti_kmaps_fields_api_test',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_kmaps_fields/api/all' => array(
      'page callback' => 'shanti_kmaps_fields_api_all',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_kmaps_fields/api/node/%' => array(
      'page callback' => 'shanti_kmaps_fields_api_node',
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
  );
}

function shanti_kmaps_fields_api_test() {
  return "Testing.";
}

function shanti_kmaps_fields_api_all() {

  global $base_url;
  $service = 'essays'; // CONFIG
  $tables = array();
  $data = array();

	// USE DB API
  $sql = "SELECT field_name FROM {field_config} WHERE type LIKE 'shanti_kmaps_fields_default'";
  $rs = db_query($sql);
  foreach ($rs as $r) {
    $tables[] = "field_data_" . $r->field_name;
  }
  
  foreach ($tables as $table) {
  	// USE DB API
    $sql = 'SELECT t.*, n.title FROM {' . $table . '} t JOIN {node} n ON (t.entity_id = n.nid)';
    $rs = db_query($sql);
    foreach ($rs as $r) {
      $url = "$base_url/{$r->entity_type}/{$r->entity_id}";
      $data[$r->entity_id]['service']   = $service;
      $data[$r->entity_id]['id']        = $r->entity_id;
      $data[$r->entity_id]['uid']       = $service .'-'. $r->entity_id;
      $data[$r->entity_id]['url']       = $url;     
      $data[$r->entity_id]['caption']   = $r->title;      
      $data[$r->entity_id]['kmapid'][]  = $r->field_kmap_term_domain . '-' . $r->field_kmap_term_id;
    }
  }

  $data2 = array();
  foreach ($data as $key => $item) {
    $data2[] = $item;
  }
  print drupal_json_output($data2);
}

function shanti_kmaps_fields_api_node($nid) {
  $doc = _shanti_kmaps_fields_get_solr_doc(array($nid));
  print drupal_json_output($doc);
}

function _shanti_kmaps_fields_get_solr_doc($nid_list) {
  global $base_url;
  $service = 'essays';
  $doc = array();  
  foreach ($nid_list as $nid) {
    $node = node_load($nid);

    // We need a better way to grab the fields of the right type for each node
    $fields = array();
    $sql = "select i.field_name from field_config_instance i join field_config c on (i.field_id = c.id) where c.type = 'shanti_kmaps_fields_default' and i.bundle = :bundle";
    $rs = db_query($sql, array(':bundle' => $node->type)); // BUNDLE?
    foreach ($rs as $r) {
      $fields[] = $r->field_name;
    }

    // Note that we are losing info about the field here, which is essentially
    // about the relationship between the KMap term and the node
    $kmapids = array();
    foreach ($fields as $field) {
      foreach ($node->{$field}[$node->language] as $term) {
        $kmapids[] = $term['domain'] .'-'. $term['id']; 
      }    
    }
    $doc[] = array(
      'url'     => "$base_url/node/{$node->nid}",
      'caption' => $node->title,
      'service' => $service,
      'id'      => $nid,
      'uid'     => $service .'-'. $nid,
      'kmapid'  => $kmapids
    );
  }
  return $doc;
}

////////// FIELD //////////

function shanti_kmaps_fields_field_info() {
  $info = array();
  $info['shanti_kmaps_fields_default'] = array(
    'label'             => t('KMap Term'),
    'description'       => t('A KMap Term for integrating content into the Mandala ecology.'),
    'settings'          => array('kmap_server' => 'production','kmap_domain' => 'subjects'),  
    'instance_settings' => array(), 
    'default_widget'    => 'kmap_default_widget',
    'default_formatter' => 'kmap_default_formatter',  
  );
  return $info;
}

function shanti_kmaps_fields_field_is_empty($item, $field) {
  if ($field['type'] == 'shanti_kmaps_fields_default' && isset($item['kmap_raw'])) {
    $values = array_map('trim',explode('|',$item['kmap_raw']));
    if (isset($values[0],$values[1],$values[2])) {
      return FALSE;
    }    
  }
  return TRUE;
}

function shanti_kmaps_fields_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $settings = $field['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $form['kmap_server'] = array(
      '#type' => 'select',
      '#title' => t('KMap Server'),
      '#description' => t('The server to use for KMaps access on this site.'),
      '#required' => TRUE,
      '#options' => array('development' => 'development', 'production' => 'production'), // THESE VALUES SHOULD COME FROM KMAP UTILS
      '#default_value' => $settings['kmap_server'],
    );
    $form['kmap_domain'] = array(
      '#type' => 'select',
      '#title' => t('KMap Domain'),
      '#description' => t('The domain (subjects or places) to use for KMaps access on this entity type.'),
      '#required' => TRUE,
      '#options' => array('subjects' => 'subjects', 'places' => 'places'),  // THESE VALUES SHOULD COME FROM KMAP UTILS
      '#default_value' => $settings['kmap_domain'],
    );
  }
  return $form;
}

function shanti_kmaps_fields_field_instance_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {}
  return $form;
}

function shanti_kmaps_fields_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    foreach($items as $delta => $item) {
      if(!empty($item['id'])) {
        if(!is_int($item['id']+0)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'kmap_id_invalid',
            'message' => t('KMap ID must be a number. ' . $item['id']),
          );
        }
      }
    }   
  } 
}

////////// WIDGETS //////////

function shanti_kmaps_fields_field_widget_info() {
  $info = array();
  $info['kmap_default_widget'] = array(
    'label' => t('Autocomplete'),
    'field types' => array('shanti_kmaps_fields_default')
  );
  $info['kmap_tree_picker '] = array(
    'label' => t("Tree"),
    'field types' => array('shanti_kmaps_fields_default'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FALSE, // THIS IS SO THAT USERS DON'T ADD MORE THAN ONE WIDGET
      // However, the "Number of Values" field in the form must be set to "Unlimited" in the field settings form
      // for the field to actually accept multiple values in the database
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),    
  );
  return $info;
}

function shanti_kmaps_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array('#delta' => $delta);
  $base = $element;

  // NEED TO FIX HOW ANCESTOR PATHS ARE HANDLED
  if ($instance['widget']['type'] == 'kmap_default_widget') {
      
    $server = $field['settings']['kmap_server'];
    $domain = $field['settings']['kmap_domain'];

    $element['kmap_raw'] = array(
      '#type' => 'textfield',
      '#size' => 200,
      '#maxlength' => 500,
      '#default_value' => isset($items[$delta]['raw']) ? $items[$delta]['raw'] : '', // Grab existing content from three field,
      '#autocomplete_path' => "shanti_kmaps_utils/autocomplete/$domain/$server",
      '#element_validate' => array('_shanti_kmaps_fields_split_kmap_raw'),
    ) + $base;
    $element['kmap_id'] = array(
      '#type' => 'value',
      '#default_value' => 0   
    );    
    $element['kmap_header'] = array(
      '#type' => 'value',    
      '#default_value' => 'None entered'
    );
    $element['kmap_path'] = array(
      '#type' => 'value',    
      '#default_value' => 'None entered'
    );    
    
  }
  
  elseif ($instance['widget']['type'] == 'kmap_tree_picker ') {

    $base = $element;
    $domain = $field['settings']['kmap_domain'];
    $server = $field['settings']['kmap_server'];
        
    $element = array(
      '#type'             => 'fieldset',
      '#title'            => t('KMap ID Selector'), 
      '#collapsible'      => TRUE, 
      '#collapsed'        => FALSE,
      '#tree'             => TRUE,
      '#element_validate' => array('_shanti_kmaps_fields_extract_data_from_hidden_box'),
    ) + $base;
    $element['kmap_search_term'] = array(
      '#title'            => '',
      '#type'             => 'textfield',
      '#description'      => "<p>Enter a search term for the KMap $domain server and press tab to see the results.</p>",
      '#size'             => 30,
      '#default_value'    => '',
      //'#field_suffix'     => "<span class='kmap_search_term_button' style='border:1px solid black;padding:2px 5px;'>Search</search>",
    );
    $element['kmap_pick_tree'] = array(
      '#title' => '',
      '#type' => 'item',
    );
    $element['kmap_result_box'] = array(
      '#title'  => '',
      '#type'   => 'item',
    );
    $element['kmap_hidden_box'] = array(
      '#title'  => '',
      '#type'   => 'textarea',
      '#prefix' => '<div class="datastore">',
      '#suffix' => '</div>',
    );
    
    // Add CSS and JS to the form
    $this_path = drupal_get_path('module','shanti_kmaps_fields');
    $form['#attached']['js'] = array(
      $this_path . "/js/shanti_kmaps_fields.tree.js",
    );
    $form['#attached']['css'] = array(
      $this_path . "/css/shanti_kmaps_fields.tree.css",
    );
    
    // SETTINGS 
    
    // Construct field IDs
    $infix = '';
    //if (is_int($delta)) $infix = '-'.$delta; // Actually, if multifield is set
    $field_id         = str_replace('_', '-', "edit-{$field['field_name']}");
    $search_input_id  = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-search-term");
    $pick_tree_id     = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-pick-tree");
    $res_box_id       = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-result-box");
    $hidden_box_id    = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-hidden-box");
    
    // NEED TO CONSTRUCT OTHER ELEMENT IDS! Otherwise, fields will collide

    // To construct URL below; move to top if needed elsewhere
    global $base_url;

    // Pass settings to the JS
    $js_settings = array(
      'domain'          => $domain, 
      'server'          => $server,
      //'kmap_url'        => "$base_url/shanti_kmaps_utils/list-uncached/$domain/$server/", // We call our local interface
      'kmap_url'        => "$base_url/shanti_kmaps_utils/list/$domain/$server/", // We call our local interface
      'search_input_id' => $search_input_id,
      'field_id'        => $field_id,
      'pick_tree_id'    => $pick_tree_id,
      'res_box_id'      => $res_box_id,
      'hidden_box_id'   => $hidden_box_id,
      'picked_already'  => _shanti_kmaps_fields_get_json($items, $domain),
    );
  
    $form['#attached']['js'][] = array(
      'data' => array('shanti_kmaps_fields' => $js_settings),
      'type' => 'setting',
    );
    
  }
  
  return $element;
}

function _shanti_kmaps_fields_get_json($items, $domain) {
  $data = array();
  foreach ($items as $i => $item) {
    $fid = 'F'.$item['id'];
    $data[$fid]['id']     = $item['id'];
    $data[$fid]['header'] = $item['header'];
    $data[$fid]['path']   = $item['path'];
    $data[$fid]['domain'] = $item['domain'];
  }
  $json = drupal_json_encode($data);
  return $json;
}

function _shanti_kmaps_fields_split_kmap_raw($element, &$form_state) {
  $field_name = $element['#field_name'];
  $language = $element['#language'];
  $delta = $element['#delta'];
  $values = array_map('trim', explode('|', $element['#value']));
  if (isset($values[0], $values[1], $values[2])) {
    $form_state['values'][$field_name][$language][$delta]['id']      = $values[0];
    $form_state['values'][$field_name][$language][$delta]['header']  = $values[1];
    $form_state['values'][$field_name][$language][$delta]['path']    = $values[2];      
  }
}

function _shanti_kmaps_fields_extract_data_from_hidden_box($element, &$form_state) {
  $json = $element['kmap_hidden_box']['#value'];
  $data = drupal_json_decode($json);
  $form_state['node']->kmap_data = $data; // We secretly piggy-back on node ...
  $form_state['node']->kmap_field_name = $element['#field_name']; // Same here
}


function shanti_kmaps_fields_node_insert($node) {
  _shanti_kmaps_fields_add_kmaps_to_node($node);
}

function shanti_kmaps_fields_node_update($node) {
  _shanti_kmaps_fields_add_kmaps_to_node($node);
}

function shanti_kmaps_fields_node_delete($node) {
  _shanti_kmaps_fields_delete_solr_doc($node->nid);
}


// This function assumes that we are the only ones using kmap_data as key attached to node
function _shanti_kmaps_fields_add_kmaps_to_node($node) {
  if ($node->kmap_data) {
    $lang   = $node->language;
    $field  = $node->kmap_field_name;
    $node->{$field}[$lang] = array();
    foreach ($node->kmap_data as $fid => $item) {
      $node->{$field}[$lang][] = array(
        'raw'     => "NOT USED", // Need to remove this field altogther
        'id'      => $item['id'],
        'header'  => $item['header'],
        'path'    => $item['path'],
        'domain'  => $item['domain'],
      );
    }
    
    field_attach_update('node', $node); // This is crucial -- data not saved to field for node otherwise  
    entity_get_controller('node')->resetCache(array($node->nid)); // This is needs to get most recent ids
    _shanti_kmaps_fields_push_solr_doc($node->nid);
    
  }
  return $node;
}

function _shanti_kmaps_fields_push_solr_doc($nid) {
  $solrdoc = json_encode(_shanti_kmaps_fields_get_solr_doc(array($nid)));
  _shanti_kmaps_fields_update_solr_index($solrdoc);
}

function _shanti_kmaps_fields_delete_solr_doc($nid) {
  $solrdoc = "{ \"delete\": { \"query\":\"uid:essays-{$nid}\" } }";
  _shanti_kmaps_fields_update_solr_index($solrdoc);
}

// PUT THIS IS KMAPS_UTILS?
function _shanti_kmaps_fields_update_solr_index($solrdoc, $debug = FALSE, $message = TRUE) {
  global $base_url;
  $url = "http://kidx.shanti.virginia.edu/solr/kmindex/update/json?commit=true"; // SHOULD COME FROM SOMEWHERE ELSE
  $options = array(
    'method'  => 'POST',
    'data'    => $solrdoc,
    'headers' => array('Content-type' => 'application/json; charset=utf-8', 'Content-Length' => strlen($solrdoc)),
  );
  $resp = drupal_http_request($url,$options);
  if ($debug) {
    dpm($solrdoc);
    dpm($resp);
  }
  if ($message) {
    drupal_set_message("Index response: " . $resp->status_message);
  }
}


////////// FORMATTERS //////////

function shanti_kmaps_fields_field_formatter_info() {
  $info = array();
  $info['kmap_simple_formatter'] = array(
    'label' => t('Plain text'),
    'field types' => array('shanti_kmaps_fields_default'),
  );
  $info['kmap_default_formatter'] = array(
    'label' => t('Link to entry on KMaps Server'),
    'field types' => array('shanti_kmaps_fields_default'),
    'settings' => array('target' => '_blank'),
  );
  return $info;
}

function shanti_kmaps_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($instance['display'][$view_mode]['type'] == 'kmap_default_formatter') {
    $summary = t('@setting', array('@setting' => "KMap Default Formatter"));    
  }
  return $summary;
}

function shanti_kmaps_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array(); 
  if ($display['type'] == 'kmap_default_formatter') {
    $element['target'] = array(
      '#type' => 'select',
      '#title' => t('HREF target'),
      '#options' => array('_blank' => 'New window', '_self' => 'Same window'),
      '#default_value' => $settings['target'],
      '#description' => t('Control where the link opens (i.e. set the TARGET attribute of the A element).'),
    );
  }
  return $element;
}

function shanti_kmaps_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings']; // Key needs to be defined in info array (who knew?)
  $element = array();
  if ($display['type'] == 'kmap_simple_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta]['#markup'] = '<p>' . t($item['raw']) . '</p>';
    }
  } 
  elseif ($display['type'] == 'kmap_default_formatter') {
    $target = $settings['target'];
    foreach ($items as $delta => $item) {
      $domain = $field['settings']['kmap_domain'];
      $title = _shanti_kmaps_fields_decode_path($item['path']);
      $element[$delta]['#markup'] = "<a href=\"http://{$domain}.kmaps.virginia.edu/features/{$item['id']}\" title=\"{$title}\" target=\"{$target}\">{$item['header']}</a>";
    }
  }
  return $element;
}

function _shanti_kmaps_fields_decode_path($path){
  $nicepath = str_replace("}}{{","--",$path);
  $nicepath = str_replace("}}","",$nicepath);
  $nicepath = str_replace("{{","",$nicepath);
  return $nicepath;
}

