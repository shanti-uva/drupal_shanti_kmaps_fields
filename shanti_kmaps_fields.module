<?php

define('SHANTI_KMAPS_FIELDS_SERVICE', preg_replace("/\./",'_',preg_replace("/http:\/\//", '', $GLOBALS['base_url'])));
define('SHANTI_KMAPS_FIELDS_ASSET_TYPE_VAR_PREFIX', 'shanti_kmaps_fields_asset_type__');

////////// GENERAL //////////

function shanti_kmaps_fields_menu() {
  return array(
    'shanti_kmaps_fields/api/test' => array(
      'page callback' => 'shanti_kmaps_fields_api_test',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_kmaps_fields/api/all' => array(
      'page callback' => 'shanti_kmaps_fields_api_all',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_kmaps_fields/api/node/%' => array(
      'page callback' => 'shanti_kmaps_fields_api_node',
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),    
    'admin/config/content/shanti_kmaps_fields' => array(
      'title' => 'SHANTI KMaps',
      'description' => 'Specify servers for pulling and pushing KMaps information.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('shanti_kmaps_fields_admin'),
      'access arguments' => array('administer shanti_kmaps_fields'),
      'type' => MENU_NORMAL_ITEM,      
    ),
    'shanti_kmaps_fields/kmaps_list/%/%' => array(
      'title' => 'KMaps Tree Function',
      'page callback' => 'shanti_kmaps_fields_kmaps_list_func',
      'page arguments' => array(2,3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,  
    ),
    'shanti_kmaps_fields/kmaps_autocomplete/%/%' => array(
      'title' => 'KMaps Autocomplete Function',
      'page callback' => 'shanti_kmaps_fields_kmaps_autocomplete_func',
      'page arguments' => array(2,3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,  
    ),
  );
}

function shanti_kmaps_fields_permission() {
 return array(
    'administer shanti_kmaps_fields' => array(
      'title' => t('Administer SHANTI KMaps Fields'),
    ),
  );
}

function shanti_kmaps_fields_admin() {
  $form['shanti_kmaps_fields_server_subjects'] = array(
    '#type' => 'textfield',
    '#title' => t('KMaps Subjects server'),
    '#default_value' => variable_get('shanti_kmaps_fields_server_subjects', 'http://subjects.kmaps.virginia.edu'),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t('The server used to retrieve KMap subject terms.'),
    '#required' => TRUE,
  );
  $form['shanti_kmaps_fields_server_places'] = array(
    '#type' => 'textfield',
    '#title' => t('KMaps Places server'),
    '#default_value' => variable_get('shanti_kmaps_fields_server_places', 'http://places.kmaps.virginia.edu'),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t('The server used to retrieve KMap place terms.'),
    '#required' => TRUE,
  );
  $form['shanti_kmaps_fields_server_solr'] = array(
    '#type' => 'textfield',
    '#title' => t('KMaps Solr server'),
    '#default_value' => variable_get('shanti_kmaps_fields_server_solr', 'http://kidx.shanti.virginia.edu/solr/kmindex'),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t("The server used to store the KMap index. This may include a path to the specific index. Leave blank if you don't care to register your content with the SHANTI Collections Index"),
    '#required' => TRUE,
  );
  return system_settings_form($form);  
}

function shanti_kmaps_fields_form_alter(&$form, &$form_state, $form_id) {
  if (preg_match("/node_type_form/",$form_id)) {
    $node_type = $form['#node_type']->type;
    $form['shanti_kmaps_fields'] = array(
      '#type' => 'fieldset',
      '#title' => t('SHANTI KMaps Fields'),
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_asset_type'] = array(
      '#type'           => 'select',
      '#title'          => t('SHANTI Asset Type'),
      '#description'    => t('If this entity uses a SHANTI KMaps Field, set the SHANTI asset type of this entity. If not, just leave as "NA".'),
      '#options'        => array('__NONE__' => t('NA'), 'texts' => t('text'),'photos' => t('photo or image'),'audio-video' => t('audio or video'),'visuals' => t('visualization'),'sources' => t('bibliographic source'),'subjects' => t('subject term'),'places' => t('place term'),'terms' => t('general term'),'maps' => t('map'),'agents' => t('agent (e.g. person)'),'events' => t('event')),
      '#required'       => FALSE,
      '#default_value'  => variable_get(SHANTI_KMAPS_FIELDS_ASSET_TYPE_VAR_PREFIX . $node_type),
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_info'] = array(
      '#type' => 'markup',
      '#markup' => t('<p>Specify the Drupal menu paths for the functions below. Use <b>__NID__</b> to specify where the entity ID goes in each URL below. These URLs may not exist, and so may need to be created, for example by using Services, Views, or by creating menu items in a module.</p>'),
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_html'] = array(
      '#type' => 'textfield',
      '#title' => t('HTML Path'),
      '#description' => t("The local Drupal path where the entity associated with this entity can be viewed as a full HTML page, suitable for linking. This is usually <b>node/__NID__</b>. (Without the trailing period, of course.)"),
      '#size' => 120,
      '#maxlength' => 255,
      '#required' => FALSE,
      '#default_value' => variable_get('shanti_kmaps_fields_url_html__'.$node_type, 'node/__NID__'),    
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_ajax'] = array(
      '#type' => 'textfield',
      '#title' => t('AJAX Path'),
      '#description' => t('The local Drupal path where the entity associated with this entity can be viewed as an HTML fragment, suitable for embedding.'),
      '#size' => 120,
      '#maxlength' => 255,
      '#required' => FALSE,
      '#default_value' => variable_get('shanti_kmaps_fields_url_ajax__'.$node_type,''),    
    );    
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_json'] = array(
      '#type' => 'textfield',
      '#title' => t('JSON Path'),
      '#description' => t('The local Drupal path where the entity associated with this entity can be retrieved as a JSON string, suitable for munging.'),
      '#size' => 120,
      '#maxlength' => 255,
      '#required' => FALSE,
      '#default_value' => variable_get('shanti_kmaps_fields_url_json__'.$node_type, ''),        
    );
    $form['#submit'][] = 'shanti_kmaps_fields_form_alter_submit';
  }
}

function shanti_kmaps_fields_form_alter_submit($form, &$form_state) {
  $node_type = $form['#node_type']->type;
  $var1 = SHANTI_KMAPS_FIELDS_ASSET_TYPE_VAR_PREFIX . $node_type;
  $val1 = $form_state['input']['shanti_kmaps_fields_asset_type'];
  variable_set($var1,$val1);
  $url_types = array('html','ajax','json');
  foreach ($url_types as $url_type) {
    $input_var = 'shanti_kmaps_fields_url_'.$url_type;
    $save_var = $input_var.'__'.$node_type;
    $val = $form_state['input'][$input_var];
    variable_set($save_var, $val);
  } 
}

function shanti_kmaps_fields_api_test() {
  return SHANTI_KMAPS_FIELDS_SERVICE;
}

function shanti_kmaps_fields_api_all() {

  global $base_url;
  $tables = array();
  $data = array();

  $sql = "SELECT `field_name` FROM {field_config} WHERE `type` LIKE 'shanti_kmaps_fields_default'";
  $rs = db_query($sql);
  foreach ($rs as $r) {
    $tables[] = "field_data_" . $r->field_name;
  }
  
  foreach ($tables as $table) {
    $sql = 'SELECT t.*, n.title FROM {' . $table . '} t JOIN {node} n ON (t.entity_id = n.nid)';
    $rs = db_query($sql);
    foreach ($rs as $r) {
      $node_type = $r->bundle;
      $data[$r->entity_id]['service']     = SHANTI_KMAPS_FIELDS_SERVICE;
      $data[$r->entity_id]['asset_type']  = variable_get(SHANTI_KMAPS_FIELDS_ASSET_TYPE_VAR_PREFIX . $node_type);
      $data[$r->entity_id]['id']          = $r->entity_id;
      $data[$r->entity_id]['uid']         = SHANTI_KMAPS_FIELDS_SERVICE .'-'. $r->entity_id;
      $data[$r->entity_id]['url_html']    = "$base_url/" . preg_replace('/__NID__/', $r->entity_id, variable_get('shanti_kmaps_fields_url_html__'.$node_type));     
      $data[$r->entity_id]['url_ajax']    = "$base_url/" . preg_replace('/__NID__/', $r->entity_id, variable_get('shanti_kmaps_fields_url_ajax__'.$node_type));     
      $data[$r->entity_id]['url_json']    = "$base_url/" . preg_replace('/__NID__/', $r->entity_id, variable_get('shanti_kmaps_fields_url_json__'.$node_type));     
      $data[$r->entity_id]['caption']     = $r->title;      
      $data[$r->entity_id]['kmapid'][]    = $r->field_kmap_term_domain . '-' . $r->field_kmap_term_id;
    }
  }

  $data2 = array();
  foreach ($data as $key => $item) {
    $data2[] = $item;
  }
  print drupal_json_output($data2);
}

function shanti_kmaps_fields_api_node($nid) {
  $doc = _shanti_kmaps_fields_get_solr_doc(array($nid));
  print drupal_json_output($doc);
}

function _shanti_kmaps_fields_get_solr_doc($nid_list) {
  global $base_url;
  $doc = array();  
  foreach ($nid_list as $nid) {
    $node = node_load($nid);
    if (!$node) { return "Not a node."; }

    // We need a better way to grab the fields of the right type for each node
    $fields = array();
    $sql = "select i.field_name from field_config_instance i join field_config c on (i.field_id = c.id) where c.type = 'shanti_kmaps_fields_default' and i.bundle = :bundle";
    $rs = db_query($sql, array(':bundle' => $node->type)); // BUNDLE?
    foreach ($rs as $r) {
      $fields[] = $r->field_name;
    }

    // Note that we are losing info about the field here, which is essentially
    // about the relationship between the KMap term and the node
    $kmapids = array();
    foreach ($fields as $field) { /// NEED TO GET FIELD INSTANCE DATA HERE ....
      foreach ($node->{$field}[$node->language] as $term) {
        $kmapids[] = $term['domain'] .'-'. $term['id']; 
      }    
    }
    $doc[] = array(
      'service'     => SHANTI_KMAPS_FIELDS_SERVICE,
      'asset_type'  => variable_get(SHANTI_KMAPS_FIELDS_ASSET_TYPE_VAR_PREFIX . $node->type), 
      'id'          => $node->nid,
      'uid'         => SHANTI_KMAPS_FIELDS_SERVICE .'-'. $node->nid,
      'url_html'    => "$base_url/" . preg_replace('/__NID__/', $node->nid, variable_get('shanti_kmaps_fields_url_html__'.$node->type)),
      'url_ajax'    => "$base_url/" . preg_replace('/__NID__/', $node->nid, variable_get('shanti_kmaps_fields_url_ajax__'.$node->type)),
      'url_json'    => "$base_url/" . preg_replace('/__NID__/', $node->nid, variable_get('shanti_kmaps_fields_url_json__'.$node->type)),
      'caption'     => $node->title,
      'kmapid'      => $kmapids
    );
  }
  return $doc;
}

/*
_shanti_kmaps_fields_get_solr_doc_item ($node,$kmapids) {
  $item = array();
}
*/
////////// FIELD //////////

function shanti_kmaps_fields_field_info() {
  global $base_url;
  $info = array();
  $info['shanti_kmaps_fields_default'] = array(
    'label'             => t('KMap Term'),
    'description'       => t('A KMap Term for integrating content into the Mandala ecology.'),
    'settings'          => array('kmap_domain' => 'subjects'),
    //'instance_settings' => array(), 
    'default_widget'    => 'kmap_default_widget',
    'default_formatter' => 'kmap_default_formatter',  
  );
  return $info;
}

function shanti_kmaps_fields_field_is_empty($item, $field) {
  if ($field['type'] == 'shanti_kmaps_fields_default' && isset($item['kmap_raw'])) {
    $values = array_map('trim',explode('|',$item['kmap_raw']));
    if (isset($values[0],$values[1],$values[2])) {
      return FALSE;
    }    
  }
  return TRUE;
}

function shanti_kmaps_fields_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $settings = $field['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $form['kmap_domain'] = array(
      '#type' => 'select',
      '#title' => t('KMap Domain'),
      '#description' => t('The domain (subjects or places) to use for KMaps access on this entity type.'),
      '#required' => TRUE,
      '#options' => array('subjects' => 'subjects', 'places' => 'places'),
      '#default_value' => $settings['kmap_domain'],
    );
  }
  return $form;
}

/*
function shanti_kmaps_fields_field_instance_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {}
  return $form;
}
*/

function shanti_kmaps_fields_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    foreach($items as $delta => $item) {
      if(!empty($item['id'])) {
        if(!is_int($item['id']+0)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'kmap_id_invalid',
            'message' => t('KMap ID must be a number. ' . $item['id']),
          );
        }
      }
    }   
  } 
}

////////// WIDGETS //////////

function shanti_kmaps_fields_field_widget_info() {
  $info = array();
  $info['kmap_default_widget'] = array(
    'label' => t('Autocomplete'),
    'field types' => array('shanti_kmaps_fields_default')
  );
  $info['kmap_tree_picker '] = array(
    'label' => t("Tree"),
    'field types' => array('shanti_kmaps_fields_default'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FALSE, // THIS IS SO THAT USERS DON'T ADD MORE THAN ONE WIDGET
      // However, the "Number of Values" field in the form must be set to "Unlimited" in the field settings form
      // for the field to actually accept multiple values in the database
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),    
  );
  return $info;
}

function shanti_kmaps_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array('#delta' => $delta);
  $base = $element;

  // NEED TO FIX HOW ANCESTOR PATHS ARE HANDLED
  if ($instance['widget']['type'] == 'kmap_default_widget') {
      
    $domain = $field['settings']['kmap_domain'];
    //$server = variable_get('shanti_kmaps_fields_server_' . $domain);

    $element['kmap_raw'] = array( // THIS NEEDS TO GO
      '#type' => 'textfield',
      '#size' => 200,
      '#maxlength' => 500,
      '#default_value' => isset($items[$delta]['raw']) ? $items[$delta]['raw'] : '', // Grab existing content from three field,
      '#autocomplete_path' => "shanti_kmaps_fields/kmaps_autocomplete/$domain",
      //'#element_validate' => array('_shanti_kmaps_fields_split_kmap_raw'),
    ) + $base;
    $element['kmap_id'] = array(
      '#type' => 'value',
      '#default_value' => 0   
    );    
    $element['kmap_header'] = array(
      '#type' => 'value',    
      '#default_value' => 'None entered'
    );
    $element['kmap_path'] = array(
      '#type' => 'value',    
      '#default_value' => 'None entered'
    );    
    
  }
  
  elseif ($instance['widget']['type'] == 'kmap_tree_picker ') {

    $base = $element;
    
    $domain = $field['settings']['kmap_domain'];
    //$server = variable_get('shanti_kmaps_fields_server_' . $domain);
    $server = _shanti_kmaps_fields_get_kmaps_server($domain);
    
    $element = array(
      '#type'             => 'fieldset',
      '#title'            => t('KMap ID Selector'), 
      '#collapsible'      => TRUE, 
      '#collapsed'        => FALSE,
      '#tree'             => TRUE,
      '#element_validate' => array('_shanti_kmaps_fields_extract_data_from_hidden_box'),
    ) + $base;
    $element['kmap_search_term'] = array(
      '#title'            => '',
      '#type'             => 'textfield',
      '#description'      => "<p>Enter a search term for the KMap $domain server and press tab to see the results.</p>",
      '#size'             => 30,
      '#default_value'    => '',
      //'#field_suffix'     => "<span class='kmap_search_term_button' style='border:1px solid black;padding:2px 5px;'>Search</search>",
    );
    $element['kmap_pick_tree'] = array(
      '#title' => '',
      '#type' => 'item',
    );
    $element['kmap_result_box'] = array(
      '#title'  => '',
      '#type'   => 'item',
    );
    $element['kmap_hidden_box'] = array(
      '#title'  => '',
      '#type'   => 'textarea',
      '#prefix' => '<div class="datastore">',
      '#suffix' => '</div>',
    );
    
    // Add CSS and JS to the form
    $this_path = drupal_get_path('module','shanti_kmaps_fields');
    $form['#attached']['js'] = array($this_path . "/js/shanti_kmaps_fields.tree.js");
    $form['#attached']['css'] = array($this_path . "/css/shanti_kmaps_fields.tree.css");
    
    // SETTINGS 
    
    // Construct field IDs
    $infix = '';
    //if (is_int($delta)) $infix = '-'.$delta; // Actually, if multifield is set
    $field_id         = str_replace('_', '-', "edit-{$field['field_name']}");
    $search_input_id  = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-search-term");
    $pick_tree_id     = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-pick-tree");
    $res_box_id       = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-result-box");
    $hidden_box_id    = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}{$infix}-kmap-hidden-box");
    
    // NEED TO CONSTRUCT OTHER ELEMENT IDS! Otherwise, fields will collide

    // To construct URL below; move to top if needed elsewhere
    global $base_url;

    // Pass settings to the JS
    $js_settings = array(
      //'kmap_server'     => $server, // Is this needed?
      'domain'          => $domain,
      'kmap_url'        => "$base_url/shanti_kmaps_fields/kmaps_list/$domain/",
      'search_input_id' => $search_input_id,
      'field_id'        => $field_id,
      'pick_tree_id'    => $pick_tree_id,
      'res_box_id'      => $res_box_id,
      'hidden_box_id'   => $hidden_box_id,
      'picked_already'  => _shanti_kmaps_fields_get_json($items, $domain),
    );
  
    $form['#attached']['js'][] = array(
      'data' => array('shanti_kmaps_fields' => $js_settings),
      'type' => 'setting',
    );
    
  }
  
  return $element;
}

function _shanti_kmaps_fields_get_json($items, $domain) {
  $data = array();
  foreach ($items as $i => $item) {
    $fid = 'F'.$item['id'];
    $data[$fid]['id']     = $item['id'];
    $data[$fid]['header'] = $item['header'];
    $data[$fid]['path']   = $item['path'];
    $data[$fid]['domain'] = $item['domain'];
  }
  $json = drupal_json_encode($data);
  return $json;
}

/* THIS NEEDS TO GO
function _shanti_kmaps_fields_split_kmap_raw($element, &$form_state) {
  $field_name = $element['#field_name'];
  $language = $element['#language'];
  $delta = $element['#delta'];
  $values = array_map('trim', explode('|', $element['#value']));
  if (isset($values[0], $values[1], $values[2])) {
    $form_state['values'][$field_name][$language][$delta]['id']      = $values[0];
    $form_state['values'][$field_name][$language][$delta]['header']  = $values[1];
    $form_state['values'][$field_name][$language][$delta]['path']    = $values[2];      
  }
}
*/

function _shanti_kmaps_fields_extract_data_from_hidden_box($element, &$form_state) {
  $json = $element['kmap_hidden_box']['#value'];
  $data = drupal_json_decode($json);
  $form_state['node']->kmap_data = $data; // We secretly piggy-back on node ...
  $form_state['node']->kmap_field_name = $element['#field_name']; // Same here
}


function shanti_kmaps_fields_node_insert($node) {
  _shanti_kmaps_fields_add_kmaps_to_node($node);
}

function shanti_kmaps_fields_node_update($node) {
  _shanti_kmaps_fields_add_kmaps_to_node($node);
}

function shanti_kmaps_fields_node_delete($node) {
  _shanti_kmaps_fields_delete_solr_doc($node->nid);
}


// This function assumes that we are the only ones using kmap_data as key attached to node
function _shanti_kmaps_fields_add_kmaps_to_node($node) {
  if ($node->kmap_data) {
    $lang   = $node->language;
    $field  = $node->kmap_field_name;
    $node->{$field}[$lang] = array();
    foreach ($node->kmap_data as $fid => $item) {
      $node->{$field}[$lang][] = array(
        'raw'     => "NOT USED",
        'id'      => $item['id'],
        'header'  => $item['header'],
        'path'    => $item['path'],
        'domain'  => $item['domain'],
      );
    }
    field_attach_update('node', $node); // This is crucial -- data not saved to field for node otherwise  
    entity_get_controller('node')->resetCache(array($node->nid)); // This is needs to get most recent ids
    _shanti_kmaps_fields_push_solr_doc($node->nid);
  }
  return $node;
}

function _shanti_kmaps_fields_push_solr_doc($nid) {
  $solrdoc = json_encode(_shanti_kmaps_fields_get_solr_doc(array($nid)));
  _shanti_kmaps_fields_update_solr_index($solrdoc);
}

function _shanti_kmaps_fields_delete_solr_doc($nid) {
  $solrdoc = "{ \"delete\": { \"query\":\"uid:essays-{$nid}\" } }";
  _shanti_kmaps_fields_update_solr_index($solrdoc);
}

function _shanti_kmaps_fields_update_solr_index($solrdoc, $debug = TRUE, $message = TRUE) {
  global $base_url;
  $solr_url = variable_get('shanti_kmaps_fields_solr_server');
  $url = "$solr_url/update/json?commit=true";
  $options = array(
    'method'  => 'POST',
    'data'    => $solrdoc,
    'headers' => array('Content-type' => 'application/json; charset=utf-8', 'Content-Length' => strlen($solrdoc)),
  );
  $resp = drupal_http_request($url,$options);
  if ($debug) {
    dpm($solrdoc);
    dpm($resp);
    drupal_set_message("URL " . $url);
  }
  if ($message) {
    drupal_set_message("Index response: " . $resp->status_message);
  }
}


////////// FORMATTERS //////////

function shanti_kmaps_fields_field_formatter_info() {
  $info = array();
  $info['kmap_simple_formatter'] = array(
    'label' => t('Plain text'),
    'field types' => array('shanti_kmaps_fields_default'),
  );
  $info['kmap_default_formatter'] = array(
    'label' => t('Link to entry on KMaps Server'),
    'field types' => array('shanti_kmaps_fields_default'),
    'settings' => array('target' => '_blank'),
  );
  return $info;
}

function shanti_kmaps_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($instance['display'][$view_mode]['type'] == 'kmap_default_formatter') {
    $summary = t('@setting', array('@setting' => "KMap Default Formatter"));    
  }
  return $summary;
}

function shanti_kmaps_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array(); 
  if ($display['type'] == 'kmap_default_formatter') {
    $element['target'] = array(
      '#type' => 'select',
      '#title' => t('HREF target'),
      '#options' => array('_blank' => 'New window', '_self' => 'Same window'),
      '#default_value' => $settings['target'],
      '#description' => t('Control where the link opens (i.e. set the TARGET attribute of the A element).'),
    );
  }
  return $element;
}

function shanti_kmaps_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings']; // Key needs to be defined in info array (who knew?)
  $element = array();
  if ($display['type'] == 'kmap_simple_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta]['#markup'] = '<p>' . t($item['raw']) . '</p>';
    }
  } 
  elseif ($display['type'] == 'kmap_default_formatter') {
    $target = $settings['target'];
    foreach ($items as $delta => $item) {
      $domain = $field['settings']['kmap_domain'];
      $title = _shanti_kmaps_fields_decode_path($item['path']);
      $element[$delta]['#markup'] = "<a href=\"http://{$domain}.kmaps.virginia.edu/features/{$item['id']}\" title=\"{$title}\" target=\"{$target}\">{$item['header']}</a>";
    }
  }
  return $element;
}

function _shanti_kmaps_fields_decode_path($path){
  $nicepath = str_replace("}}{{","--",$path);
  $nicepath = str_replace("}}","",$nicepath);
  $nicepath = str_replace("{{","",$nicepath);
  return $nicepath;
}

/// KMAP Server Interaction

function shanti_kmaps_fields_kmaps_list_func($domain = 'subjects', $string) {
	//$server = variable_get('shanti_kmaps_fields_server_' . $domain);
  $server = _shanti_kmaps_fields_get_kmaps_server($domain);
  $request = new KMapsAPI($domain, $server);
  $result = $request->searchByNameGetList($string);
	drupal_json_output($result);    
}

function shanti_kmaps_fields_kmaps_autocomplete_func($domain = 'subjects', $string) {
  //$server = variable_get('shanti_kmaps_fields_server_' . $domain);
  $server = _shanti_kmaps_fields_get_kmaps_server($domain);
  $request = new KMapsAPI($domain, $server);
  $matches = $request->searchByName($string); 
  drupal_json_output($matches);    
}

function _shanti_kmaps_fields_get_kmaps_server($domain = 'subjects') {
  if (in_array($domain,array('subjects','places'))) {
    return variable_get('shanti_kmaps_fields_server_' . $domain);
  } else {
    return FALSE;
  }
}
