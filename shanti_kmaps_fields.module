<?php
# TEST AGAIN
define('SHANTI_KMAPS_FIELDS_SERVICE', preg_replace("/[\.\/]/", '_', str_replace('http://', '', $GLOBALS['base_url'])));
define('SHANTI_KMAPS_FIELDS_SERVER_SUBJECTS','http://subjects.kmaps.virginia.edu');
define('SHANTI_KMAPS_FIELDS_SERVER_PLACES','http://places.kmaps.virginia.edu');
define('SHANTI_KMAPS_FIELDS_SERVER_SUBJECTS_EXPLORER','http://badger.drupal-dev.shanti.virginia.edu/subjects/__KMAPID__');
define('SHANTI_KMAPS_FIELDS_SERVER_PLACES_EXPLORER','http://badger.drupal-dev.shanti.virginia.edu/places/__KMAPID__');
define('SHANTI_KMAPS_FIELDS_SERVER_SOLR','http://kidx.shanti.virginia.edu/solr/kmindex');
define('SHANTI_KMAPS_FIELDS_PATH', drupal_get_path('module','shanti_kmaps_fields'));

function shanti_kmaps_fields_menu() {
  return array(
    'shanti_kmaps_fields/api/test' => array(
      'page callback'     => 'shanti_kmaps_fields_api_test',
      'type'              => MENU_CALLBACK,
      'access arguments'  => array('access content'),
    ),
    'shanti_kmaps_fields/api/all' => array(
      'page callback'     => 'shanti_kmaps_fields_api_all',
      'type'              => MENU_CALLBACK,
      'access arguments'  => array('access content'),  
    ),
    'shanti_kmaps_fields/api/node/%' => array(
      'page callback'     => 'shanti_kmaps_fields_api_node',
      'page arguments'    => array(3),
      'type'              => MENU_CALLBACK,
      'access arguments'  => array('access content'),
    ),    
    'admin/config/content/shanti_kmaps_fields' => array(
      'title' => 'SHANTI KMaps Fields',
      'description'       => 'Specify servers for pulling and pushing KMaps information.',
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('shanti_kmaps_fields_admin'),
      'access arguments'  => array('administer shanti_kmaps_fields'),
      'type'              => MENU_NORMAL_ITEM,      
    ),
    'shanti_kmaps_fields/kmaps_list/%/%' => array(
      'title'             => 'KMaps Tree Function',
      'page callback'     => 'shanti_kmaps_fields_kmaps_list_func',
      'page arguments'    => array(2,3),
      'access arguments'  => array('access content'),
      'type'              => MENU_CALLBACK,  
    ),
    'shanti_kmaps_fields/kmaps_autocomplete/%/%' => array(
      'title'             => 'KMaps Autocomplete Function',
      'page callback'     => 'shanti_kmaps_fields_kmaps_autocomplete_func',
      'page arguments'    => array(2,3),
      'access arguments'  => array('access content'),
      'type'              => MENU_CALLBACK,  
    ),
  );
}

function shanti_kmaps_fields_permission() {
 return array(
    'administer shanti_kmaps_fields' => array(
      'title' => t('Administer SHANTI KMaps Fields'),
    ),
  );
}

function shanti_kmaps_fields_admin() {
  $form['shanti_kmaps_fields_server_subjects'] = array(
    '#type'           => 'textfield',
    '#title'          => t('KMaps Subjects Server'),
    '#default_value'  => variable_get('shanti_kmaps_fields_server_subjects', SHANTI_KMAPS_FIELDS_SERVER_SUBJECTS),
    '#size'           => 60,
    '#maxlength'      => 255,
    '#description'    => t('The server used to retrieve data for KMap subject terms.'),
    '#required'       => TRUE,
  );
  $form['shanti_kmaps_fields_server_places'] = array(
    '#type'           => 'textfield',
    '#title'          => t('KMaps Places Server'),
    '#default_value'  => variable_get('shanti_kmaps_fields_server_places', SHANTI_KMAPS_FIELDS_SERVER_PLACES),
    '#size'           => 60,
    '#maxlength'      => 255,
    '#description'    => t('The server used to retrieve data for KMap place terms.'),
    '#required'       => TRUE,
  );
  $form['shanti_kmaps_fields_server_subjects_explorer'] = array(
    '#type'           => 'textfield',
    '#title'          => t('KMaps Subjects Explorer'),
    '#default_value'  => variable_get('shanti_kmaps_fields_server_subjects_explorer', SHANTI_KMAPS_FIELDS_SERVER_SUBJECTS_EXPLORER),
    '#size'           => 60,
    '#maxlength'      => 255,
    '#description'    => t('The site used to view and explore KMap subject terms in the SHANTI KMap Solr Index.'),
    '#required'       => TRUE,
  );
  $form['shanti_kmaps_fields_server_places_explorer'] = array(
    '#type'           => 'textfield',
    '#title'          => t('KMaps Places Explorer'),
    '#default_value'  => variable_get('shanti_kmaps_fields_server_places_explorer', SHANTI_KMAPS_FIELDS_SERVER_PLACES_EXPLORER),
    '#size'           => 60,
    '#maxlength'      => 255,
    '#description'    => t('The site used to view and explore KMap place terms in the SHANTI KMap Solr Index.'),
    '#required'       => TRUE,
  );
  $form['shanti_kmaps_fields_server_solr_opt_in'] = array(
    '#type'           => 'checkbox',
    '#title'          => t("Do you want to publish your KMap data to the SHANTI KMap Solr Index?"),
    '#description'    => t("If yes, then make sure you set the next field to a valid Solr URL."),
    '#default_value'  => variable_get('shanti_kmaps_fields_server_solr_opt_in', 0),
    '#options'        => array(0 => 'no', 1 => 'yes'),
  );
  $form['shanti_kmaps_fields_server_solr'] = array(
    '#type'           => 'textfield',
    '#title'          => t('KMaps Solr Server'),
    '#default_value'  => variable_get('shanti_kmaps_fields_server_solr', SHANTI_KMAPS_FIELDS_SERVER_SOLR),
    '#size'           => 60,
    '#maxlength'      => 255,
    '#description'    => t("The URL to the SHANTI KMap index. This may include a path to the specific index."),
    '#required'       => FALSE,
  );
  return system_settings_form($form);  
}

function shanti_kmaps_fields_form_alter(&$form, &$form_state, $form_id) {
  $opt_in = variable_get('shanti_kmaps_fields_server_solr_opt_in');
  if ($opt_in && preg_match("/node_type_form/",$form_id)) {
    $node_type = $form['#node_type']->type;
    $form['shanti_kmaps_fields'] = array(
      '#type'           => 'fieldset',
      '#title'          => t('SHANTI KMaps Fields'),
      '#weight'         => 0,
      '#collapsible'    => TRUE,
      '#collapsed'      => FALSE,
      '#group'          => 'additional_settings',
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_asset_type'] = array(
      '#type'           => 'select',
      '#title'          => t('SHANTI Asset Type'),
      '#description'    => t('If this entity uses a SHANTI KMaps Field, set the SHANTI asset type of this entity. If not, just leave as "NA".'),
      '#options'        => array('__NONE__' => t('NA'), 'texts' => t('text'),'photos' => t('photo or image'),'audio-video' => t('audio or video'),'visuals' => t('visualization'),'sources' => t('bibliographic source'),'subjects' => t('subject term'),'places' => t('place term'),'terms' => t('general term'),'maps' => t('map'),'agents' => t('agent (e.g. person)'),'events' => t('event')),
      '#required'       => FALSE,
      '#default_value'  => variable_get('shanti_kmaps_fields_asset_type__' . $node_type),
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_info'] = array(
      '#type'           => 'markup',
      '#markup'         => t('<p>Specify the Drupal menu paths for the functions below. Use <b>__NID__</b> to specify where the entity ID goes in each path below. These paths may not exist, so they may need to be created, for example by using Services, Views, or by creating menu items in a module.</p>'),
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_html'] = array(
      '#type'           => 'textfield',
      '#title'          => t('HTML Path'),
      '#description'    => t("The local Drupal path where the entity associated with this entity can be viewed as a full HTML page, suitable for linking. This is usually <b>node/__NID__</b>. (Without the trailing period, of course.)"),
      '#size'           => 120,
      '#maxlength'      => 255,
      '#required'       => FALSE,
      '#default_value'  => variable_get('shanti_kmaps_fields_url_html__'.$node_type, 'node/__NID__'),    
    );
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_ajax'] = array(
      '#type'           => 'textfield',
      '#title'          => t('AJAX Path'),
      '#description'    => t('The local Drupal path where the entity associated with this entity can be viewed as an HTML fragment, suitable for embedding.'),
      '#size'           => 120,
      '#maxlength'      => 255,
      '#required'       => FALSE,
      '#default_value'  => variable_get('shanti_kmaps_fields_url_ajax__'.$node_type,''),    
    );    
    $form['shanti_kmaps_fields']['shanti_kmaps_fields_url_json'] = array(
      '#type'           => 'textfield',
      '#title'          => t('JSON Path'),
      '#description'    => t('The local Drupal path where the entity associated with this entity can be retrieved as a JSON string, suitable for munging.'),
      '#size'           => 120,
      '#maxlength'      => 255,
      '#required'       => FALSE,
      '#default_value'  => variable_get('shanti_kmaps_fields_url_json__'.$node_type, ''),        
    );
    $form['#submit'][] = 'shanti_kmaps_fields_form_alter_submit';
  }
}

function shanti_kmaps_fields_form_alter_submit($form, &$form_state) {
  $node_type = $form['#node_type']->type;
  $var1 = 'shanti_kmaps_fields_asset_type__' . $node_type;
  $val1 = $form_state['input']['shanti_kmaps_fields_asset_type'];
  variable_set($var1,$val1);
  $url_types = array('html','ajax','json');
  foreach ($url_types as $url_type) {
    $input_var = 'shanti_kmaps_fields_url_'.$url_type;
    $save_var = $input_var.'__'.$node_type;
    $val = $form_state['input'][$input_var];
    variable_set($save_var, $val);
  } 
}

function shanti_kmaps_fields_api_test() {
  $assets = shanti_kmaps_fields_get_assets_for_kmapid('places',24108);
  kpr($assets);
  return "TEST";
}

function shanti_kmaps_fields_api_all() {

  $tables = array();
  $data   = array();

  $sql = "SELECT `field_name` FROM {field_config} WHERE `type` LIKE 'shanti_kmaps_fields_default'";
  $rs = db_query($sql);
  foreach ($rs as $r) {
    $tables[] = "field_data_" . $r->field_name;
  }
  
  foreach ($tables as $table) {
    $sql = 'SELECT t.*, n.title FROM {' . $table . '} t JOIN {node} n ON (t.entity_id = n.nid)';
    $rs = db_query($sql);
    foreach ($rs as $r) {
      $node_type = $r->bundle;
      $data[$r->entity_id]['service']     = SHANTI_KMAPS_FIELDS_SERVICE;
      $data[$r->entity_id]['asset_type']  = variable_get('shanti_kmaps_fields_asset_type__' . $node_type);
      $data[$r->entity_id]['id']          = $r->entity_id;
      $data[$r->entity_id]['uid']         = SHANTI_KMAPS_FIELDS_SERVICE .'-'. $r->entity_id;      
      $data[$r->entity_id]['url_html']    = url(str_replace('__NID__', $r->entity_id, variable_get('shanti_kmaps_fields_url_html__'.$node_type)), array('absolute' => TRUE));     
      $data[$r->entity_id]['url_ajax']    = url(str_replace('__NID__', $r->entity_id, variable_get('shanti_kmaps_fields_url_ajax__'.$node_type)), array('absolute' => TRUE));     
      $data[$r->entity_id]['url_json']    = url(str_replace('__NID__', $r->entity_id, variable_get('shanti_kmaps_fields_url_json__'.$node_type)), array('absolute' => TRUE));           
      $data[$r->entity_id]['caption']     = $r->title;      
      $data[$r->entity_id]['kmapid'][]    = $r->field_kmap_term_domain . '-' . $r->field_kmap_term_id;
    }
  }

  $data2 = array();
  foreach ($data as $key => $item) {
    $data2[] = $item;
  }
  print drupal_json_output($data2);
}

function shanti_kmaps_fields_api_node($nid) {
  $doc = _shanti_kmaps_fields_get_solr_doc(array($nid));
  print drupal_json_output($doc);
}

function _shanti_kmaps_fields_get_solr_doc($nid_list) {
  $doc = array();  
  foreach ($nid_list as $nid) {
    $node = node_load($nid);
    if (!$node) { return "Not a node."; }

    // This query assumes that we have defined only one field type in hook_field_info()
    // If you add another field type to this module, you need to reproduce this logic for
    // that field (although we could ensure that any new type has an ID and DOMAIN key)
    $fields = array();
    $field_type = 'shanti_kmaps_fields_default';
    $sql = "select i.field_name from field_config_instance i join field_config c on (i.field_id = c.id) where c.type = :field_type and i.bundle = :bundle";
    $rs = db_query($sql, array(':bundle' => $node->type, ':field_type' => $field_type));
    foreach ($rs as $r) {
      $fields[] = $r->field_name;
    }

    // Note that we are losing info about the relation between the KMap term and the node
    $kmapids = array();
    foreach ($fields as $field_name) { /// NEED TO GET FIELD INSTANCE DATA HERE ....
      $terms = field_get_items('node',$node,$field_name);
      if ($terms) {
        foreach ($terms as $term) {
          $kmapids[] = $term['domain'] .'-'. $term['id']; 
        }    
      }
    }
    $doc[] = array(
      'service'     => SHANTI_KMAPS_FIELDS_SERVICE,
      'asset_type'  => variable_get('shanti_kmaps_fields_asset_type__' . $node->type), 
      'id'          => $node->nid,
      'uid'         => SHANTI_KMAPS_FIELDS_SERVICE .'-'. $node->nid,
      'url_html'    => url(str_replace('__NID__', $node->nid, variable_get('shanti_kmaps_fields_url_html__'.$node->type)), array('absolute' => TRUE)),
      'url_ajax'    => url(str_replace('__NID__', $node->nid, variable_get('shanti_kmaps_fields_url_ajax__'.$node->type)), array('absolute' => TRUE)),
      'url_json'    => url(str_replace('__NID__', $node->nid, variable_get('shanti_kmaps_fields_url_json__'.$node->type)), array('absolute' => TRUE)),
      'caption'     => $node->title,
      'kmapid'      => $kmapids
    );
  }
  return $doc;
}

////////// FIELD //////////

function shanti_kmaps_fields_field_info() {
  $info = array();
  $info['shanti_kmaps_fields_default'] = array(
    'label'             => t('KMap Term'),
    'description'       => t('A KMap Term for integrating content into the Mandala ecology.'),
    'settings'          => array('kmap_domain' => 'subjects'),
    'instance_settings' => array('search_view' => NULL), 
    'default_widget'    => 'kmap_default_widget',
    'default_formatter' => 'kmap_default_formatter',  
  );
  return $info;
}

function shanti_kmaps_fields_field_is_empty($item, $field) {
  if ($field['type'] == 'shanti_kmaps_fields_default' && isset($item['kmap_raw'])) {
    $values = array_map('trim',explode('|',$item['kmap_raw']));
    if (isset($values[0],$values[1],$values[2])) {
      return FALSE;
    }    
  }
  return TRUE;
}

function shanti_kmaps_fields_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $settings = $field['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $form['kmap_domain'] = array(
      '#type'           => 'select',
      '#title'          => t('KMap Domain'),
      '#description'    => t('The domain (subjects or places) to use for KMaps access on this entity type.'),
      '#required'       => TRUE,
      '#options'        => array('subjects' => 'subjects', 'places' => 'places'),
      '#default_value'  => $settings['kmap_domain'],
    );
  }
  return $form;
}

function shanti_kmaps_fields_field_instance_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $form['search_view'] = array(
      '#type'           => 'textfield',
      '#title'          => t('KMap ID View'),
      '#description'    => t('The local Drupal path for the view with which to search for nodes of this content type by KMap ID. Used by the popover field formatter. Use <b>__KMAPID__</b> to signify the KMap ID value in the path.'),
      '#size'           => 120,
      '#maxlength'      => 255,
      '#required'       => FALSE,
      '#default_value'  => $settings['search_view'], 
    );
  }
  return $form;
}

function shanti_kmaps_fields_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    foreach($items as $delta => $item) {
      if(!empty($item['id'])) {
        if(!is_int($item['id']+0)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'kmap_id_invalid',
            'message' => t('KMap ID must be a number. ' . $item['id']),
          );
        }
      }
    }   
  } 
}

////////// WIDGETS //////////

function shanti_kmaps_fields_field_widget_info() {
  $info = array();
  $info['kmap_default_widget'] = array(
    'label'         => t('Autocomplete'),
    'field types'   => array('shanti_kmaps_fields_default')
  );
  $info['kmap_tree_picker '] = array(
    'label'         => t("Tree"),
    'field types'   => array('shanti_kmaps_fields_default'),
    'settings'      => array(),
    'behaviors'     => array(
      'multiple values' => FALSE, 
      // THIS IS SO THAT USERS DON'T ADD MORE THAN ONE WIDGET
      // However, the "Number of Values" field in the form must be set to "Unlimited" in the field settings form
      // for the field to actually accept multiple values in the database
      'default value'   => FIELD_BEHAVIOR_DEFAULT,
    ),    
  );
  return $info;
}

function shanti_kmaps_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $field_id = $field['field_name'] . '_' . $delta;

  if ($instance['widget']['type'] == 'kmap_default_widget') {
      
    $domain = $field['settings']['kmap_domain'];

    $element['kmap_raw'] = array( // THIS NEEDS TO GO
      '#type'               => 'textfield',
      '#size'               => 200,
      '#maxlength'          => 500,
      '#default_value'      => isset($items[$delta]['raw']) ? $items[$delta]['raw'] : '', // Grab existing content from three field,
      '#autocomplete_path'  => "shanti_kmaps_fields/kmaps_autocomplete/$domain",
    );
    $element['kmap_id'] = array(
      '#type'               => 'value',
      '#default_value'      => 0   
    );    
    $element['kmap_header'] = array(
      '#type'               => 'value',    
      '#default_value'      => 'None entered'
    );
    $element['kmap_path'] = array(
      '#type'               => 'value',    
      '#default_value'      => 'None entered'
    );    
  }
  
  elseif ($instance['widget']['type'] == 'kmap_tree_picker ') {
    $domain = $field['settings']['kmap_domain'];
    $server = _shanti_kmaps_fields_get_kmaps_server($domain);
    $element += array(
      '#type'             => 'fieldset',
      '#collapsible'      => TRUE, 
      '#collapsed'        => FALSE,
      '#tree'             => TRUE,
      '#element_validate' => array('_shanti_kmaps_fields_extract_data_from_hidden_box'),
      '#attributes'       => array('id' => $field_id .'_fieldset'),
    );
    $element['kmap_search_field_id'] = array(
      '#type'             => 'hidden',
      '#value'            => $field_id,
      '#attributes'       => array('class' => 'my_field_id'),
    );
    $element['kmap_search_term'] = array(
      '#title'            => t('Search for ' . $domain),
      '#type'             => 'textfield',
      '#description'      => "<p>Enter a search term for the KMap $domain server and press tab to see the results.</p>",
      '#size'             => 30,
      '#default_value'    => '',
      '#attributes'       => array('id' => $field_id .'_search_term'),
      '#field_suffix'     => "<span id='".$field_id."_search_button' class='kmap_search_term_button' style='border:1px solid black;padding:2px 5px;'>Search</search>",
    );
    $element['kmap_pick_tree'] = array(
      '#type'             => 'container',
      '#attributes'       => array('id' => $field_id .'_pick_tree', 'class' => array('kmap_pick_tree')),
    );
    $element['kmap_result_box'] = array(
      '#type'             => 'container',
      '#attributes'       => array('id' => $field_id .'_result_box', 'class' => array('kmap_result_box')),      
    );
    $element['kmap_hidden_box'] = array(
      '#title'            => '',
      '#type'             => 'textarea',
      '#prefix'           => '<div class="datastore">',
      '#attributes'       => array('id' => $field_id .'_hidden_box'),
      '#suffix'           => '</div>',
    );

    // Add CSS and JS to the form
    $element['#attached']['js'][]   = SHANTI_KMAPS_FIELDS_PATH . "/js/shanti_kmaps_fields.tree.js";
    $element['#attached']['css'][]  = SHANTI_KMAPS_FIELDS_PATH . "/css/shanti_kmaps_fields.tree.css";
    
    // To construct URL below; move to top if needed elsewhere

    // Pass settings to the JS
    $js_settings = array(
      $field_id => array(
        'field_name'      => $field['field_name'],
        'domain'          => $domain,
        'kmap_url'        => url("shanti_kmaps_fields/kmaps_list/$domain/"),
        'picked_already'  => _shanti_kmaps_fields_get_json($items),
      ),
    );
  
    // Try to load settings for each instance of the field ... does not work
    // only loads the second one. :-(
    $element['#attached']['js'][] = array(
      'data' => array('shanti_kmaps_fields' => $js_settings),
      'type' => 'setting',
    );
        
  }
  return $element;
}

function _shanti_kmaps_fields_get_json($items) {
  $data = array();
  foreach ($items as $i => $item) {
    $fid = 'F'.$item['id'];
    $data[$fid]['id']     = $item['id'];
    $data[$fid]['header'] = $item['header'];
    $data[$fid]['path']   = $item['path'];
    $data[$fid]['domain'] = $item['domain'];
  }
  $json = drupal_json_encode($data);
  return $json;
}

function _shanti_kmaps_fields_extract_data_from_hidden_box($element, &$form_state) {
  $field_name = $element['#field_name'];
  $delta      = $element['#delta'];
  $json       = $element['kmap_hidden_box']['#value'];
  $data       = drupal_json_decode($json);
  watchdog_array('SHANTI','hidden box data',$data);
  $form_state['node']->kmap_data[$field_name] = $data;
}

function shanti_kmaps_fields_node_insert($node) {
  _shanti_kmaps_fields_add_kmaps_to_node($node);  
}

function shanti_kmaps_fields_node_update($node) {
  _shanti_kmaps_fields_add_kmaps_to_node($node);
}

function shanti_kmaps_fields_node_delete($node) {
  _shanti_kmaps_fields_delete_solr_doc($node->nid);
}

// This function assumes that we are the only ones using kmap_data as key attached to node
function _shanti_kmaps_fields_add_kmaps_to_node($node) {
  if (isset($node->kmap_data) && $node->kmap_data) {
    $lang = $node->language;    
    foreach ($node->kmap_data as $field_name => $data) {
      $node->{$field_name}[$lang] = array();
      foreach ($data as $fid => $item) {
        $node->{$field_name}[$lang][] = array(
          'raw'     => "NOT USED",
          'id'      => $item['id'],
          'header'  => $item['header'],
          'path'    => $item['path'],
          'domain'  => $item['domain'],
        );
      }    
    }
  }
  field_attach_update('node', $node); // This is crucial -- data not saved to field for node otherwise
  entity_get_controller('node')->resetCache(array($node->nid)); // This is needed to get most recent ids
  _shanti_kmaps_fields_push_solr_doc($node->nid);
  return $node;
}

function _shanti_kmaps_fields_push_solr_doc($nid) {
  $solrdoc = json_encode(_shanti_kmaps_fields_get_solr_doc(array($nid)));
  _shanti_kmaps_fields_update_solr_index($solrdoc);
}

function _shanti_kmaps_fields_delete_solr_doc($nid) {
  $service = SHANTI_KMAPS_FIELDS_SERVICE;
  $solrdoc = "{ \"delete\": { \"query\":\"uid:{$service}-{$nid}\" } }";
  _shanti_kmaps_fields_update_solr_index($solrdoc);
}

function _shanti_kmaps_fields_update_solr_index($solrdoc, $debug = FALSE, $message = TRUE) {
  $opt_in = variable_get('shanti_kmaps_fields_server_solr_opt_in');
  if ($opt_in) {
    $solr_url = variable_get('shanti_kmaps_fields_server_solr');
    $url = "$solr_url/update/json?commit=true";
    $options = array(
      'method'  => 'POST',
      'data'    => $solrdoc,
      'headers' => array('Content-type' => 'application/json; charset=utf-8', 'Content-Length' => strlen($solrdoc)),
    );
    $resp = drupal_http_request($url,$options);
    if ($debug) {
      dpm($solrdoc);
      dpm($resp);
      drupal_set_message("URL " . $url);
    }
    if ($message) {
      drupal_set_message("Index response: " . $resp->status_message);
    } 
    else {
      drupal_set_message("No response from index!");
    }
  } else {
    drupal_set_message("KMap data not published to SHANTI index, as requested.");
  }
}

function shanti_kmaps_fields_get_assets_for_kmapid($kmap_domain, $kmap_id) {
  $kmap_key = $kmap_domain . '-' . $kmap_id;
  $assets = array();
  $solr_request = drupal_http_request(variable_get('shanti_kmaps_fields_server_solr') 
    . "/query?q=kmapid:{$kmap_key}&rows=3000");
  $solr_response = drupal_json_decode($solr_request->data);
  foreach ($solr_response['response']['docs'] as $solr_doc) {
    $assets[$solr_doc['asset_type']][] = array( 'url' => $solr_doc['url_html'], 'caption' => $solr_doc['caption']);
  }
  return $assets;
}

////////// FORMATTERS //////////

function shanti_kmaps_fields_field_formatter_info() {
  $info = array();
  $info['kmap_simple_formatter'] = array(
    'label'         => t('Plain text'),
    'field types'   => array('shanti_kmaps_fields_default'),
  );
  $info['kmap_default_formatter'] = array(
    'label'         => t('Link to entry on KMaps Server'),
    'field types'   => array('shanti_kmaps_fields_default'),
    'settings'      => array('target' => '_blank'),
  );
  $info['kmap_popover_formatter'] = array(
    'label'         => t('Sarvaka popover with link options'),  
    'field types'   => array('shanti_kmaps_fields_default'),
    'description'   => "Designed for use with SHANTI's Sarvaka Theme.",
  );
  return $info;
}

function shanti_kmaps_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($instance['display'][$view_mode]['type'] == 'kmap_default_formatter') {
    $summary = t('@setting', array('@setting' => "KMap Default Formatter"));    
  }
  elseif ($instance['display'][$view_mode]['type'] == 'kmap_popover_formatter') {
    $summary = t('@setting', array('@setting' => "Use only with one of SHANTI's Sarvaka Themes"));    
  }
  return $summary;
}

function shanti_kmaps_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array(); 
  if ($display['type'] == 'kmap_default_formatter') {
    $element['target'] = array(
      '#type'           => 'select',
      '#title'          => t('HREF target'),
      '#options'        => array('_blank' => 'New window', '_self' => 'Same window'),
      '#default_value'  => $settings['target'],
      '#description'    => t('Control where the link opens (i.e. set the TARGET attribute of the A element).'),
    );
  }
  elseif ($display['type'] == 'kmap_popover_formatter') {
    
  }
  return $element;
}

function shanti_kmaps_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings']; // Key needs to be defined in info array (who knew?)
  $element = array();
  if ($display['type'] == 'kmap_simple_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta]['#markup'] = '<p>' . t($item['raw']) . '</p>';
    }
  } 
  elseif ($display['type'] == 'kmap_default_formatter') {
    $target = $settings['target'];
    $kmap_terms = array();
    foreach ($items as $delta => $item) {
      $domain = $field['settings']['kmap_domain'];
      $title = _shanti_kmaps_fields_decode_path($item['path']);
      $url = '';
      if ($domain == 'subjects') {
        $url = SHANTI_KMAPS_FIELDS_SERVER_SUBJECTS_EXPLORER;
      } elseif ($domain == 'places') {
        $url = SHANTI_KMAPS_FIELDS_SERVER_PLACES_EXPLORER;      
      }
      $url = str_replace('__KMAPID__',$item['id'],$url);
      $kmap_terms[] = l($item['header'],$url,array('attributes' => array('title' => $title, 'target' => $target)));
    }
    $element['links'] = array(
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#items' => $kmap_terms,
    );
  }
  elseif ($display['type'] == 'kmap_popover_formatter') {
    foreach ($items as $delta => $item) {
      
      $domain = $field['settings']['kmap_domain'];
      $info = _shanti_kmaps_fields_kmaps_get_info($domain, $item['id']); // Should test this!
      
      $desc = t('For more information about this term, see Full Entry below.');
      if ($domain == 'subjects' && isset($info->feature->nested_descriptions[0]->title)) {
        $desc = $info->feature->nested_descriptions[0]->title;
      } elseif ($domain == 'places' && isset($info->feature->captions[0]->content)) {
        $desc = $info->feature->captions[0]->content;
      }
      
      $ancestors1 = array();
      if ($domain == 'subjects') {
        if (isset($info->feature->ancestors)) {
          $ancestors1 = $info->feature->ancestors;
        }
      } elseif ($domain == 'places') {
        $ancestors1 = $info->feature->perspectives[0]->ancestors; // Again, may need to choose perspectives
      }
      $ancestors = array();
      foreach($ancestors1 as $i => $a) {
        $id = $a->id;
        $title = $a->header;
        $url = str_replace('__KMAPID__',$id,variable_get('shanti_kmaps_fields_server_'.$domain.'_explorer'));
        #$delim = '';
        #if ($i) $delim = '';
        #$ancestors[] = "<a target='_blank' href='$url'>$delim$title</a>";
        $ancestors[] = "<a target='_blank' href='$url'>$title</a>";
      }
      array_pop($ancestors); // Because the last is the same is the current
      
      // Should probably trap these
      $external_url = str_replace('__KMAPID__',$item['id'],variable_get('shanti_kmaps_fields_server_'.$domain.'_explorer'));

      $internal_url = '';
      if ($instance['settings']['search_view']) {
        $internal_url = str_replace('__KMAPID__', $id, $instance['settings']['search_view']);
      }

      $asset_type = variable_get('shanti_kmaps_fields_asset_type__'.$entity->type); 
      $links = array(
        'Full Entry' => array('icon' => 'link-external', 'href' => $external_url, 'external' => TRUE),
        "Related ".ucfirst($asset_type)." on this site" => array('icon' => $asset_type, 'href' =>  $internal_url), 
      );
      
      $asset_links = shanti_kmaps_fields_get_assets_for_kmapid($domain, $item['id']);
      foreach($asset_links as $atype => $ainf) {
        $count = count($ainf);
        $href = preg_replace("/__KMAPID__\/overview/",$item['id'].'/'.$asset_type,variable_get('shanti_kmaps_fields_server_'.$domain.'_explorer'));
        $links["Related ".ucfirst($atype)." on Mandala ($count)"] = array('icon' => $atype, 'href' => $href);
      }

      $element[$delta]['info_popover'] = array(
        '#theme' => 'info_popover',
        '#label' => $item['header'],
        '#desc' => $desc,
        '#tree' => array(
          'label' => t(ucfirst($domain)),
          'items' => $ancestors
        ),
        '#attached' => array(
            'js'  => array(drupal_get_path('module','shanti_kmaps_fields') . '/js/shanti_kmaps_fields.popover.js'),
        ),
        '#links' => $links
      );      
      
    }
  }
  return $element;
}

function shanti_kmaps_fields_theme() {
  return array(
    'info_popover' => array(
      'variables' => array('label' => '', 'desc' => '', 'tree' => array(), 'links' => array()),
    ),
  );
}

// CHANGE THIS TO DO SOMETHING THAT DOES NOT DEPEND ON SARVAKA
// AND THEN OVERRIDE IN THEME
function theme_info_popover($variables) {
  $label        = $variables['label'];
  $description  = $variables['description'];
  $tree         = $variables['tree'];
  $links        = $variables['links'];
	$html = "<span>$label</span>"
	  ."<span class=\"popover-link\"><span class=\"popover-link-tip\"></span>"
	  ."<span class=\"icon shanticon-menu3\"></span></span>"
	  ."<div class=\"popover\" data-title=\"$label\">"
    ."<div class=\"popover-body\">"
    ."<div class=\"desc\">$description</div>"
    ."<div class=\"parents clearfix\"><p><strong>" . $tree['label']. "</strong>";
	foreach($tree['items'] as $n => $link) {
		$html .= "{$link}";
	}
	$html .= "</p></div></div><div class=\"popover-footer\">";
	foreach($links as $mylabel => $info) {
		$options = array('attributes' => array());
		if(!empty($info['external'])) { $options['attributes']['target'] = '_blank'; }
		$options['attributes']['class'] = "icon shanticon-{$info['icon']}";
		$html .= "<div class=\"popover-footer-button\">" . l($mylabel, $info['href'], $options) . "</div>";
	}
	$html .= "</div></div>";
	return $html;
}

function _shanti_kmaps_fields_decode_path($path, $delim = '--'){
  $nicepath = str_replace("}}{{",$delim,$path);
  $nicepath = str_replace("}}","",$nicepath);
  $nicepath = str_replace("{{","",$nicepath);
  return $nicepath;
}

////////// KMAP Server Interaction //////////

function shanti_kmaps_fields_kmaps_list_func($domain = 'subjects', $string) {
  $server = _shanti_kmaps_fields_get_kmaps_server($domain);
  $request = new KMapsAPI($domain, $server);
  $result = $request->searchByNameGetList($string);
  drupal_json_output($result);    
}

function shanti_kmaps_fields_kmaps_autocomplete_func($domain = 'subjects', $string) {
  $server = _shanti_kmaps_fields_get_kmaps_server($domain);
  $request = new KMapsAPI($domain, $server);
  $matches = $request->searchByName($string); 
  drupal_json_output($matches);    
}

// INTERNAL

function _shanti_kmaps_fields_kmaps_get_info($domain, $id) {
  $server = _shanti_kmaps_fields_get_kmaps_server($domain);
  $request = new KMapsAPI($domain, $server);
  $result = $request->searchByID($id);
  return $result;
}

function _shanti_kmaps_fields_get_kmaps_server($domain = 'subjects') {
  if (in_array($domain,array('subjects','places'))) {
    return variable_get('shanti_kmaps_fields_server_' . $domain);
  } else {
    return FALSE;
  }
}
