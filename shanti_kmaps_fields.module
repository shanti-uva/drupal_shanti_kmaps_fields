<?php

////////// FIELD //////////

function shanti_kmaps_fields_field_info() {
  $info = array();
  $info['shanti_kmaps_fields_default'] = array(
    'label'             => t('KMap Term'),
    'description'       => t('A KMap Term for integrating content into the Mandala ecology.'),
    'settings'          => array('kmap_server' => 'production',),  // THESE VALUES SHOULD COME FROM KMAP UTILS
    'instance_settings' => array('kmap_domain' => 'subjects'), // These are part of the Instance object
    'default_widget'    => 'kmap_default_widget',
    'default_formatter' => 'kmap_default_formatter',  
  );
  return $info;
}

function shanti_kmaps_fields_field_is_empty($item, $field) {
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $values = array_map('trim',explode('|',$item['kmap_raw']));
    if (isset($values[0],$values[1],$values[2])) {
      return FALSE;
    }    
  }
  return TRUE;
}

function shanti_kmaps_fields_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $settings = $field['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $form['kmap_server'] = array(
    '#type' => 'select',
    '#title' => t('KMap Server'),
    '#description' => t('The server to use for KMaps access on this site.'),
    '#required' => TRUE,
    '#options' => array('development' => 'development', 'production' => 'production'), // THESE VALUES SHOULD COME FROM KMAP UTILS
    '#default_value' => $settings['kmap_server'],
   );
  }
  return $form;
}

function shanti_kmaps_fields_field_instance_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['settings'];
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    $form['kmap_domain'] = array(
    '#type' => 'select',
    '#title' => t('KMap Domain'),
    '#description' => t('The domain (subjects or places) to use for KMaps access on this entity type.'),
    '#required' => TRUE,
    '#options' => array('subjects' => 'subjects', 'places' => 'places'),  // THESE VALUES SHOULD COME FROM KMAP UTILS
    '#default_value' => $settings['kmap_domain'],
   );
  }
  return $form;
}

function shanti_kmaps_fields_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'shanti_kmaps_fields_default') {
    foreach($items as $delta => $item) {
      if(!empty($item['kmap_id'])) {
        if(!is_int($item['kmap_id']+0)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'kmap_id_invalid',
            'message' => t('KMap ID must be a number. ' . $item['kmap_id']),
          );
        }
      }
    }   
  } 
}

////////// WIDGETS //////////

function shanti_kmaps_fields_field_widget_info() {
  $info = array();
  $info['kmap_default_widget'] = array(
    'label' => t('Autocomplete'),
    'field types' => array('shanti_kmaps_fields_default')
  );
  $info['kmap_tree_picker '] = array(
    'label' => t("Tree"),
    'field types' =>  array('shanti_kmaps_fields_default'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FALSE,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),    
  );
  $info['kmap_arborgraph'] = array(
    'label' => t("Arbor Graph"),
    'field types' =>  array('shanti_kmaps_fields_default'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FALSE,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),    
  );
  return $info;
}

function shanti_kmaps_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  
  $element += array('#delta' => $delta);
  $base = $element;

  // NEED TO FIX HOW ANCESTOR PATHS ARE HANDLED
  if ($instance['widget']['type'] == 'kmap_default_widget') {
      
    $server = $field['settings']['kmap_server'];
    $domain = $instance['settings']['kmap_domain'];

    $element['kmap_raw'] = array(
      '#type' => 'textfield',
      '#size' => 200,
      '#maxlength' => 500,
      '#default_value' => isset($items[$delta]['kmap_raw']) ? $items[$delta]['kmap_raw'] : '', // Grab existing content from three field,
      '#autocomplete_path' => "shanti_kmaps_utils/autocomplete/$domain/$server",
      '#element_validate' => array('_shanti_kmaps_fields_split_kmap_raw'),
    ) + $base;
    $element['kmap_id'] = array(
      '#type' => 'value',
      '#default_value' => 0   
    ) + $base;    
    $element['kmap_header'] = array(
      '#type' => 'value',    
      '#default_value' => 'None entered'
    ) + $base;
    $element['kmap_path'] = array(
      '#type' => 'value',    
      '#default_value' => 'None entered'
    ) + $base;    
    
  }
  
  elseif ($instance['widget']['type'] == 'kmap_tree_picker ') {
    $base = $element;
    $domain = $instance['settings']['kmap_domain'];
    $server = $field['settings']['kmap_server'];
    
    $element['kmap_field'] = array(
      '#type' => 'fieldset',
      '#title' => t('KMap ID Selector'), 
      '#collapsible' => TRUE, 
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    ) + $base;
    $element['kmap_field']['kmap_search_term'] = array(
      '#title' => '',
      '#type' => 'textfield',
      '#description' => "<p>Enter a search term for the KMap $domain server</p>",
      '#field_suffix' => "<span class='kmap_search_term_button' style='border:1px solid black;padding:2px 5px;'>Search</search>",
    ) + $base;
    $element['kmap_field']['kmap_pick_tree'] = array(
      '#title' => '',
      '#type' => 'item',
    ) + $base;
    $element['kmap_field']['kmap_result_box'] = array(
      '#title' => '',
      '#type' => 'item',
    ) + $base;
    
    // Add CSS and JS to the form
    $this_path = drupal_get_path('module','shanti_kmaps_fields');
    $form['#attached']['js'] = array(
      $this_path . "/js/shanti_kmaps_fields.tree.js",
    );
    $form['#attached']['css'] = array(
      $this_path . "/css/shanti_kmaps_fields.tree.css",
    );
    
    // SETTINGS 
    
    // Construct search field ID -- aren't these somewhere?
    $field_id = str_replace('_', '-', "edit-{$field['field_name']}");
    $search_input_id = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}-kmap-field-kmap-search-term");
    $pick_tree_id = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}-kmap-field-kmap-pick-tree");
    $res_box_id = str_replace('_', '-', "edit-{$field['field_name']}-{$langcode}-kmap-field-kmap-result-box");
    
    // NEED TO CONSTRUCT OTHER ELEMENT IDS! Otherwise, fields will collide

    // To construct URL below; move to top if needed elsewhere
    global $base_url;

    // Pass settings to the JS
    $js_settings = array(
      'domain'          => $domain, 
      'server'          => $server,
      //'api_url'         => "$base_url/shanti_kmaps_utils/tree/$domain/$server/", // We call our local interface
      'kmap_url'        => "$base_url/shanti_kmaps_utils/list/$domain/$server/", // We call our local interface
      'search_input_id' => $search_input_id,
      'field_id'        => $field_id,
      'pick_tree_id'    => $pick_tree_id,
      'res_box_id'      => $res_box_id,
    );
  
    $form['#attached']['js'][] = array(
      'data' => array('shanti_kmaps_fields' => $js_settings),
      'type' => 'setting',
    );

  }
  
  return $element;
}

function _shanti_kmaps_fields_split_kmap_raw($element, &$form_state) {
  $delta = $element['#delta'];
  $values = array_map('trim', explode('|', $element['#value']));
  if (isset($values[0], $values[1], $values[2])) {
    $form_state['values']['field_kmap_term']['und'][$delta]['kmap_id']      = $values[0];
    $form_state['values']['field_kmap_term']['und'][$delta]['kmap_header']  = $values[1];
    $form_state['values']['field_kmap_term']['und'][$delta]['kmap_path']    = $values[2];      
  }
}

////////// FORMATTERS //////////

function shanti_kmaps_fields_field_formatter_info() {
  $info = array();
  $info['kmap_simple_formatter'] = array(
    'label' => t('Plain text'),
    'field types' => array('shanti_kmaps_fields_default'),
  );
  $info['kmap_default_formatter'] = array(
    'label' => t('Link to entry on KMaps Server'),
    'field types' => array('shanti_kmaps_fields_default'),
    'settings' => array('target' => '_blank'),
  );
  return $info;
}

function shanti_kmaps_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($instance['display'][$view_mode]['type'] == 'kmap_default_formatter') {
    $summary = t('@setting', array('@setting' => "KMap Default Formatter"));    
  }
  return $summary;
}

function shanti_kmaps_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array(); 
  if ($display['type'] == 'kmap_default_formatter') {
    $element['target'] = array(
      '#type' => 'select',
      '#title' => t('HREF target'),
      '#options' => array('_blank' => 'New window', '_self' => 'Same window'),
      '#default_value' => $settings['target'],
      '#description' => t('Control where the link opens (i.e. set the TARGET attribute of the A element).'),
    );
  }
  return $element;
}

function shanti_kmaps_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings']; // Key needs to be defined in info array (who knew?)
  $element = array();
  if ($display['type'] == 'kmap_simple_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta]['#markup'] = '<p>' . t($item['kmap_raw']) . '</p>';
    }
  } 
  elseif ($display['type'] == 'kmap_default_formatter') {
    $target = $settings['target'];
    foreach ($items as $delta => $item) {
      $domain = $instance['settings']['kmap_domain'];
      $element[$delta]['#markup'] = "<div class='shanti-kmap-term'><a href=\"http://{$domain}.kmaps.virginia.edu/features/{$item['kmap_id']}\" title=\"{$item['kmap_path']}\" target=\"{$target}\">{$item['kmap_header']}</div>";
    }
  }
  return $element;
}

